{"version":3,"sources":["components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","loading","weather","location","region","country","current","temp_c","cloud","uv","App","useState","setWeather","setLoading","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","console","log","getWeather","className","onSubmit","e","preventDefault","type","name","placeholder","value","onChange","target","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOAkBeA,EAfC,SAAC,GAAuB,IAAD,UAArBC,EAAqB,EAArBA,QAAQC,EAAa,EAAbA,QACtB,OAAGD,EACQ,0CAEV,6BACD,+CAAWC,EAAQC,gBAAnB,aAAW,EAAkBC,QAC7B,gDAAYF,EAAQC,gBAApB,aAAY,EAAkBE,SAC9B,qDAAiBH,EAAQI,eAAzB,aAAiB,EAAiBC,OAAO,kBAAC,IAAD,OACzC,2BAAG,kBAAC,IAAD,MAAH,oBAAqBL,EAAQI,eAA7B,aAAqB,EAAiBE,OACtC,6CAASN,EAAQI,eAAjB,aAAS,EAAiBG,MCmDfC,G,MAvDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTT,EALS,KAKAU,EALA,OAMcD,oBAAS,GANvB,mBAMTV,EANS,KAMAY,EANA,OAOYF,mBAAS,KAPrB,mBAOTG,EAPS,KAODC,EAPC,OAQUJ,mBAAS,WARnB,mBAQTK,EARS,KAQFC,EARE,KAShBC,qBAAW,YAGK,uCAAG,8BAAAC,EAAA,6DACjBN,GAAW,GADM,SAEMO,MAAM,iDAAD,OAZd,kCAYc,cAA+DJ,IAF1E,cAEXK,EAFW,gBAGEA,EAASC,OAHX,OAGXC,EAHW,OAIjBX,EAAWW,GACXC,QAAQC,IAAIF,GACZV,GAAW,GANM,4CAAH,qDAShBa,KAEE,CAACV,IAQH,OACE,yBAAKW,UAAU,OACb,8CACA,0BAAMC,SATQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMmBY,UAAU,gBACrC,2BACEA,UAAU,aACVI,KAAO,OACPC,KAAM,WACNC,YAAc,aACdC,MAASpB,EACTqB,SAAY,SAACN,GAAD,OAAOd,EAAUc,EAAEO,OAAOF,UAExC,4BAAQP,UAAW,MAAMI,KAAK,UAA9B,WAIA,kBAAC,EAAD,CAAS9B,QAASA,EAASC,QAASA,OC3CtBmC,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.dd3bf26f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {WiCloud,WiCelsius} from \"react-icons/wi\";\r\n\r\nconst Weather = ({loading,weather}) => {\r\n    if(loading)\r\n        return <h1>Loading...</h1>\r\n    return(\r\n     <div>\r\n    <p>Region:{weather.location?.region}</p>\r\n    <p>Country:{weather.location?.country}</p>\r\n    <p> Temperature:{weather.current?.temp_c}<WiCelsius/></p>\r\n    <p><WiCloud/> Cloud:{weather.current?.cloud}</p>\r\n    <p>UV : {weather.current?.uv}</p>\r\n    </div>\r\n    \r\n    \r\n    )};\r\n\r\nexport default Weather;\r\n\r\n\r\n","import React , { useEffect, useState } from 'react';\n\nimport Weather from './components/Weather';\n\n\n\nimport './App.css';\n\nconst App = () => {\n\n  const APP_KEY = \"4078ef130076401db1a175048202107\";\n  \n\n  const [weather, setWeather] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [search, setSearch] = useState(\" \");\n  const [query, setQuery] = useState('cv4 8lu')\n  useEffect( () => {\n    \n\n  const getWeather = async () => {\n    setLoading(true);\n    const response = await fetch(`http://api.weatherapi.com/v1/current.json?key=${APP_KEY}&q=${query}`);\n    const data = await response.json();\n    setWeather(data);\n    console.log(data);\n    setLoading(false);\n  }\n\n  getWeather();\n  \n  },[query]);\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n  return (\n    <div className=\"App\" >\n      <h1 >Weather-Finder</h1>  \n      <form onSubmit={getSearch} className=\"search-form \" >\n      <input \n        className=\"search-bar\" \n        type = \"text\" \n        name =\" country\" \n        placeholder = \"Country...\" \n        value = {search}\n        onChange = {(e) => setSearch(e.target.value)}\n      />\n      <button className =\"btn\" type=\"submit\" >\n                Search\n      </button>\n      </form>\n      <Weather loading={loading} weather={weather}/>\n            \n    </div>\n    \n  );\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}